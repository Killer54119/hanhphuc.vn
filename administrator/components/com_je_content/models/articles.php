<?php

/**
 * @version		$Id: articles.php $
 * @copyright	Copyright (C) 2005 - 2011 Open Source Matters, Inc. All rights reserved.
 * @license		GNU General Public License version 2 or later; see LICENSE.txt
 * @author		muinx
 * This component was generated by http://joomlavietnam.net/ - 2012
 */
/**
  Generate by Component Gen Code - 2012
 */
defined('_JEXEC') or die;

jimport('joomla.application.component.modellist');

/**
 * Methods supporting a list of Articles records.
 *
 * @package		Joomla.Administrator
 * @subpackage	com_je_content
 * @since		1.6
 */
class JE_ContentModelArticles extends JModelList {

	/**
	 * Constructor.
	 *
	 * @param	array	An optional associative array of configuration settings.
	 * @see		JController
	 * @since	1.6
	 */
	public function __construct($config = array()) {
		if (empty($config['filter_fields'])) {
			$config['filter_fields'] = array(
				'id', '#__je_content.id',
				'state', '#__je_content.state',
				'title', '#__je_content.title', 'alias', '#__je_content.alias', 'featured', '#__je_content.featured',
				'categories_0_title', 'ordering', 'a.ordering', 'users_1_username'
			);
		}

		parent::__construct($config);
	}

	/**
	 * Method to get the maximum ordering value for each category.
	 *
	 * @since	1.6
	 */
	function &getCategoryOrders() {
		if (!isset($this->cache['categoryorders'])) {
			$db = $this->getDbo();
			$query = $db->getQuery(true);
			$query->select('MAX(ordering) as `max`, catid');
			$query->from('#__je_content');
			$query->group('catid');
			$db->setQuery($query);
			$this->cache['categoryorders'] = $db->loadAssocList('catid', 0);
		}
		return $this->cache['categoryorders'];
	}

	/**
	 * Build a list of authors
	 *
	 * @return	JDatabaseQuery
	 * @since	1.6
	 */
	public function getAuthors() {
		// Create a new query object.
		$db = $this->getDbo();
		$query = $db->getQuery(true);

		// Construct the query
		$query->select('u.id AS value, u.name AS text');
		$query->from('#__users AS u');
		$query->join('INNER', '#__je_content AS c ON c.created_by = u.id');
		$query->group('u.id');
		$query->order('u.name');

		// Setup the query
		$db->setQuery($query->__toString());

		// Return the result
		return $db->loadObjectList();
	}

	/**
	 * Build an SQL query to load the list data.
	 *
	 * @return	JDatabaseQuery
	 * @since	1.6
	 */
	protected function getListQuery() {
		// Initialise variables.
		$db = $this->getDbo();
		$query = $db->getQuery(true);

		// Select the required fields from the table.
		$query->select(
				$this->getState(
						'list.select', '#__je_content.id, #__je_content.state, #__je_content.checked_out AS checked_out, #__je_content.checked_out_time AS checked_out_time, 
				#__je_content.publish_up, #__je_content.publish_down, #__je_content.ordering
				, #__je_content.title, #__je_content.alias, #__je_content.featured'
				)
		);
		$query->from('`#__je_content`');

		// Join over the users for the checked out user.
		$query->select('uc.name AS editor');
		$query->join('LEFT', '#__users AS uc ON uc.id=#__je_content.checked_out');

		// Join over the categories
		$query->select('categories_0.title AS categories_0_title, categories_0.id AS catid');
		$query->join('INNER', '#__categories AS categories_0 ON categories_0.id = #__je_content.catid');

		// Join over the users
		$query->select('users_1.username AS users_1_username');
		$query->join('INNER', '#__users AS users_1 ON users_1.id = #__je_content.created_by');

		// Filter by published state
		$published = $this->getState('filter.state');
		if (is_numeric($published)) {
			$query->where('#__je_content.state = ' . (int) $published);
		} else if ($published === '') {
			$query->where('(#__je_content.state IN (0, 1))');
		}
		// Filter by category.
		$categoryId = $this->getState('filter.category_id');
		if (is_numeric($categoryId)) {
			$query->where('#__je_content.catid = ' . (int) $categoryId);
		}
		// Filter by language.
		if ($language = $this->getState('filter.language')) {
			$query->where('#__je_content.language = ' . $db->quote($language));
		}
		// Filter by featured.
		if ($featured = $this->getState('filter.featured')) {
			$query->where('#__je_content.featured = ' . $db->quote($featured));
		}
		// Filter by author
		$authorId = $this->getState('filter.author_id');
		if (is_numeric($authorId)) {
			$type = $this->getState('filter.author_id.include', true) ? '= ' : '<>';
			$query->where('#__je_content.created_by ' . $type . (int) $authorId);
		}

		// Filter by search
		$search = $this->getState('filter.search');
		if (!empty($search)) {
			$searchLike = $db->Quote('%' . $db->getEscaped($search, true) . '%');
			$search = $db->Quote($db->getEscaped($search, true));
			$query->where('(#__je_content.id = ' . $search . ' OR #__je_content.title LIKE ' . $searchLike . ')');
		} //end search
		
		// Add the list ordering clause.
		$orderCol	= $this->state->get('list.ordering', 'a.title');
		$orderDirn	= $this->state->get('list.direction', 'asc');
		if ($orderCol == 'ordering' || $orderCol == 'category_0_title') {
			$orderCol = 'categories_0.title '.$orderDirn.', ordering';
		}
		
		$query->order($db->escape($orderCol.' '.$orderDirn));

//		echo nl2br(str_replace('#__','jos_',$query));
		return $query;
	}

	/**
	 * Returns a reference to the a Table object, always creating it.
	 *
	 * @param	type	The table type to instantiate
	 * @param	string	A prefix for the table class name. Optional.
	 * @param	array	Configuration array for model. Optional.
	 * @return	JTable	A database object
	 * @since	1.6
	 */
	public function getTable($type = 'Articles', $prefix = 'JE_ContentTable', $config = array()) {
		return JTable::getInstance($type, $prefix, $config);
	}

	/**
	 * Method to auto-populate the model state.
	 *
	 * Note. Calling getState in this method will result in recursion.
	 *
	 * @since	1.6
	 */
	protected function populateState($ordering = null, $direction = null) {
		// Initialise variables.
		$app = JFactory::getApplication('administrator');

		// Load the filter state.
		$search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');
		$this->setState('filter.search', $search);

		$state = $this->getUserStateFromRequest($this->context . '.filter.state', 'filter_state', '', 'string');
		$this->setState('filter.state', $state);

		$categoryId = $this->getUserStateFromRequest($this->context . '.filter.category_id', 'filter_category_id', '');
		$this->setState('filter.category_id', $categoryId);

		$language = $this->getUserStateFromRequest($this->context . '.filter.language', 'filter_language', '');
		$this->setState('filter.language', $language);

		$authorId = $app->getUserStateFromRequest($this->context . '.filter.author_id', 'filter_author_id');
		$this->setState('filter.author_id', $authorId);
		
		$featured = $app->getUserStateFromRequest($this->context . '.filter.featured', 'filter_featured');
		$this->setState('filter.featured', $featured);

		// List state information.
		parent::populateState('#__je_content.id', 'DESC');
	}

}